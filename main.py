import logging
import re
from bit import PrivateKey
import qrcode as qrcode
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputMediaDocument, KeyboardButton, ReplyKeyboardMarkup, ContentType
import json
import sqlite3
from btc_core import gen_address

# –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = '5369040443:AAHBV3on0Vo4fzFNSqeqrRW53QYqhtNj7Cw'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

try:
    conn = sqlite3.connect("my.db")  # –∏–ª–∏ :memory: —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ RAM
    cursor = conn.cursor()
    cursor.execute(
        "CREATE TABLE users (chatid INTEGER , name TEXT, balance INTEGER, btc_wallet TEXT, wif TEXT, btc_sent TEXT, state INTEGER)")
    conn.commit()
except Exception as ex:
    print(ex)


#--------------------–ú–µ—Ç–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ start-------------------------
@dp.message_handler(commands='start')
async def start(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reg_and_data_main(message)
    button = KeyboardButton('üåê –í–∞—à –±–∞–ª–∞–Ω—Å')
    button2 = KeyboardButton('üí≥ –ü–æ–ª—É—á–∏—Ç—å BTC')
    button3 = KeyboardButton('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BTC')
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button).add(button2,button3)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.send_message(message.chat.id, '{}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Blockchain.com!'.format(message.chat.first_name), reply_markup=kb)

def reg_and_data_main(message):

    sql_select = "SELECT * FROM users where chatid={}".format(message.chat.id)
    cursor.execute(sql_select)
    data = cursor.fetchone()
    if data is None:
        sql = "SELECT COUNT(*) FROM users "
        cursor.execute(sql)
        user = cursor.fetchone()  #
        address, wif= gen_address(user[0]+1)
        sql_insert = "INSERT INTO users VALUES ({}, '{}', 0,'{}','{}','no',0)".format(message.chat.id,
                                                                           message.chat.first_name,address,wif)

        cursor.execute(sql_insert)
        conn.commit()
        cursor.execute(sql_select)
        data = cursor.fetchone()
    return data


#--------------------–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞-------------------------
@dp.message_handler()
async def main_logic(message: types.Message):

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data=reg_and_data_main(message)

    if data is not None:
        if data[6]==0:
            if message.text == 'üí≥ –ü–æ–ª—É—á–∏—Ç—å BTC':
                img = qrcode.make(data[3])
                img.save('qr.jpg')

                await bot.send_message(message.chat.id, f'''üí≥ –í–∞—à –∞–¥—Ä–µ—Å –±–∏—Ç–∫–æ–π–Ω –∫–æ—à–µ–ª—å–∫–∞:
    
*{data[3]}*''', parse_mode= "Markdown")
                await bot.send_photo(message.chat.id,photo=open('qr.jpg', 'rb'))

            if message.text == 'üåê –í–∞—à –±–∞–ª–∞–Ω—Å':
                url = f'https://blockchain.info/rawaddr/{data[3]}'
                x = requests.get(url)
                wallet = x.json()

                await bot.send_message(message.chat.id, f'''üí∞ *–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:* {format(wallet['final_balance'] / 100000000, '.9f')} BTC
    
*–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:* {format(wallet['total_received'] / 100000000, '.9f')} BTC
*–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {format(wallet['total_sent'] / 100000000, '.9f')} BTC

https://www.blockchain.com/ru/btc/address/{data[3]}''', parse_mode= "Markdown")

            if message.text == 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BTC':
                sql = "UPDATE users SET state = {} WHERE chatid = {}".format(1, message.chat.id)
                cursor.execute(sql)
                conn.commit()
                button = KeyboardButton('‚¨áÔ∏è –ù–∞–∑–∞–¥')
                kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await bot.send_message(message.chat.id,'üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ *–∞–¥—Ä–µ—Å –±–∏—Ç–∫–æ–π–Ω –∫–æ—à–µ–ª—å–∫–∞*, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ BTC (–ù–∞–ø—Ä–∏–º–µ—Ä: 12rAUoBgNgCqBpKTHwKksrAwkHBFdq1yvr)',reply_markup=kb, parse_mode="Markdown")

        if data[6] == 1:
            if message.text == '‚¨áÔ∏è –ù–∞–∑–∞–¥':
                sql = "UPDATE users SET state = {} WHERE chatid = {}".format(0, message.chat.id)
                cursor.execute(sql)
                conn.commit()
                button = KeyboardButton('üåê –í–∞—à –±–∞–ª–∞–Ω—Å')
                button2 = KeyboardButton('üí≥ –ü–æ–ª—É—á–∏—Ç—å BTC')
                button3 = KeyboardButton('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BTC')
                kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button).add(button2, button3)
                await bot.send_message(message.chat.id,'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é',reply_markup=kb)

            if message.text != '‚¨áÔ∏è –ù–∞–∑–∞–¥':
                result = re.match(r'^(?=.*[0-9])(?=.*[a-zA-Z])[\da-zA-Z]{27,34}$', message.text)

                if result is None:
                    mes = '''‚ùóÔ∏è*–û—à–∏–±–∫–∞*
Check that BTC wallet is entered correctly!'''
                    await bot.send_message(message.chat.id, mes, parse_mode="Markdown")
                else:
                    sql = "UPDATE users SET state = {} WHERE chatid = {}".format(2, message.chat.id)
                    cursor.execute(sql)
                    conn.commit()
                    sql = "UPDATE users SET btc_sent = '{}' WHERE chatid = {}".format(result.group(0), message.chat.id)
                    cursor.execute(sql)
                    conn.commit()
                    button = KeyboardButton('‚¨áÔ∏è –ù–∞–∑–∞–¥')
                    kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    await bot.send_message(message.chat.id, f'üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É *{result.group(0)}* –≤ BTC (–ù–∞–ø—Ä–∏–º–µ—Ä: 0.0001). *–ö–æ–º–∏—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ 0.0001 BTC*',
                                           reply_markup=kb, parse_mode="Markdown")
        if data[6] == 2:
            if message.text == '‚¨áÔ∏è –ù–∞–∑–∞–¥':
                sql = "UPDATE users SET state = {} WHERE chatid = {}".format(0, message.chat.id)
                cursor.execute(sql)
                conn.commit()
                button = KeyboardButton('üåê –í–∞—à –±–∞–ª–∞–Ω—Å')
                button2 = KeyboardButton('üí≥ –ü–æ–ª—É—á–∏—Ç—å BTC')
                button3 = KeyboardButton('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BTC')
                kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button).add(button2, button3)
                await bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb)

            if message.text != '‚¨áÔ∏è –ù–∞–∑–∞–¥':
                try:
                    sum=float(message.text)
                    url = f'https://blockchain.info/rawaddr/{data[3]}'
                    x = requests.get(url)
                    wallet = x.json()
                    if sum+10000<=wallet['final_balance'] / 100000000:
                        try:
                            my_key = PrivateKey(wif=data[4])
                            # –ö–æ–º–º–∏—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫—É—é, —Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–µ –ø—Ä–∏–º—É—Ç
                            # –ò —á–µ–º –±–æ–ª—å—à–µ –∫–æ–º–º–∏—Å–∏—è, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ–π–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥
                            fee = 10000
                            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            tx_hash = my_key.create_transaction([(data[5], sum, 'btc')], fee=fee, absolute_fee=True)
                            print(tx_hash)
                            url = 'https://blockchain.info/pushtx'
                            x = requests.post(url, data={'tx': tx_hash})
                            result = x.text
                            sql = "UPDATE users SET state = {} WHERE chatid = {}".format(0, message.chat.id)
                            cursor.execute(sql)
                            conn.commit()
                            button = KeyboardButton('üåê –í–∞—à –±–∞–ª–∞–Ω—Å')
                            button2 = KeyboardButton('üí≥ –ü–æ–ª—É—á–∏—Ç—å BTC')
                            button3 = KeyboardButton('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BTC')
                            kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button).add(button2, button3)
                            await bot.send_message(message.chat.id,result, reply_markup=kb)
                        except Exception:
                            sql = "UPDATE users SET state = {} WHERE chatid = {}".format(0, message.chat.id)
                            cursor.execute(sql)
                            conn.commit()
                            button = KeyboardButton('üåê –í–∞—à –±–∞–ª–∞–Ω—Å')
                            button2 = KeyboardButton('üí≥ –ü–æ–ª—É—á–∏—Ç—å BTC')
                            button3 = KeyboardButton('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å BTC')
                            kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button).add(button2, button3)
                            await bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", reply_markup=kb)
                    else:
                        await bot.send_message(message.chat.id, '‚ö†Ô∏è  –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')
                except ValueError:
                    await bot.send_message(message.chat.id, '‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

    else:
        await bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ /start')



#--------------------–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞-------------------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

